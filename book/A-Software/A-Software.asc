[appendix]
== Software

There are quite a few different components you need to get working on your system to perform the examples in this book (sorry!).
Some of these are essential, and some are optional and included for completeness.
In the following appendices, instructions for getting them installed on <<Setting up on Windows,Windows>>
or <<Setting up on Linux,Linux>> are included. Since the author of this book does not have any computers running on friut-based operating system,
I'm afraid instructions for getting the software working on MacOS will require a bit of homework,
but in theory installation on such systems should be similar to installation on Linux systems.

WARNING: Most of the software described here has reasonably simple installation packages for all operating systems. 
However, the videos are often presented in the context of a Linux shell. If you do not have access to a Linux server, your best bet is to follow our instructions for <<Automated software installation using vagrant>>. 

=== Essentials

The following tools are core to the contents of this book,
and will need to be installed before you can work on the exercises in the book.

==== Git

[Git] is version control software. It helps you keep track of changes to your scripts, notes, papers, etc.
It also facilitates communication and collaboration through the online communities https://github.com/[github] and https://bitbucket.org/[bitbucket].

==== Python

Python is a programming language used by many scientists to visualize data and crunch numbers. You can also use it to automate data management.

You will need:

. The https://www.python.org/[python programming language]
.. http://www.scipy.org/[Scipy], for scientific python. It includes lots of useful packages like
... http://www.numpy.org/[Numpy] for fast numerics.
... http://matplotlib.org/[Matplotlib] for plotting.
... http://pandas.pydata.org/[Pandas] for data analysis.
.. https://pypi.python.org/pypi/pip[pip] for python package management.

==== R

https://www.r-project.org/[R] is a program and a programming language for statistical analysis. Compared with the other packages you will need, *R* is quite painless to install on your computer! Just download and install!


=== Useful extras

You could find these tools useful. In particular, my documentation is written using something called http://asciidoctor.org/[asciidoctor], which is implemented in a programming language called Ruby. I love http://asciidoctor.org/[asciidoctor] and can't say enough good things about it. But installation of Ruby and associated packages are not required for the course. 

==== A virtual machine

This isn't exactly optional software, but rather what you might use if it becomes too much trouble to install things on either a *Windows* or an *MacOS* operating system.
A https://en.wikipedia.org/wiki/Virtual_machine[virtual machine] is software that allows you to emulate an operating system within another operating systems
(for example, you can create a Linux operating system within a Windows computer).

The software tools described in this book are all rather easy to install on a Linux system,
and for other systems some components are rather tricky to get working.
It therefore can be advantageous to run the tools described in this book within a virtual machine.

Currently the best open source option for managing virtual machines is https://www.virtualbox.org/[VirtualBox]. 
Other options exists (e.g., http://www.parallels.com/[parallels]), but virtual box is both open source and reliable. 

You can run a vitrual box in two ways:
1. You can download a full operating system; when you do this you will have a Linux desktop as though you have installed a full version of Ubuntu on your computer. There are two disadvantages to this approach. First, the guest operating system will be big (a fully installed Ubuntu system takes up 5-10Gb.) Secondly, and more problematic, is that the file systems on your virtual machine and on your host computer (i.e., your normal operating system) cannot see each other and you have to do a bit of tweaking to move files across. This is annoying and inefficient. 
2. You can use something called https://www.vagrantup.com/[Vagrant] to create a server running on your machine. This server will be much smaller than the full Linux operating system, and Vagrant allows you to sync folders across the operating systems. The disadvantage is it doens't come with a nice windowing system. But for this course we will be doing most things from command line anyway: the Vagrant methods is therefore recommended.  


==== Ruby

Ruby is a programming language used frequently by web developers and has many package for building documentation and automating collection of data over the internet.
In this book we will really only use it for documentation, but there is a large ecosystem of open source tools available in Ruby.
It hasn't been adopted to a great extent by the scientific community but you may still find useful tools, particularly if you are gathering online information.

You will need:

. The https://www.ruby-lang.org/en/[Ruby] programming language
.. https://rubygems.org/[Rubygems] for updating ruby.
.. http://bundler.io/[bumdler] for managing updates and making sure scripts are up to date.
.. http://rubyinstaller.org/add-ons/devkit/[RubyDev kit] which is needed for some other Ruby packages.
.. http://asciidoctor.org/[asciidoctor] for making notes, documentation and books.
. In addition you will need https://nodejs.org/[Node.js] for some of the Ruby tools to work.

==== c++ and fortran

A number of scientific programs are written in these languages so information on how to get them working on your windows machine is incluided here for completeness.

To get these working you will need

. The compiler. This is what translates the program into something the computer can understand.
. The tool `make`, which automates building programs.
. The tool `gdb`. which stands for gnu debugger, a tool for debugging code.
. The tool `gprof`, which is a profiler: it allows you to see which parts of your code are using the most computational resources.

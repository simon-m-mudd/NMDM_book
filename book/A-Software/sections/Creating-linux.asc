=== Creating a Linux environment inside any computer

For most of the topics covered in the course you can install things on any operating system. However, for some applications Linux is either the easiest option, particularly when it comes to numerical modelling. If you use university servers or supervcomputers, you will need to use linux, and cloud computing services like [Azure] or [Amazon Web Services] are also largely based on Linux operating systems. So for scientists it is often advantageous to be able to work in a Linux environment. Most personal or desktop computers, however, run either Windows or MacOS. This section explains how to get a Linux environment working on any computer. The way you do this is with https://en.wikipedia.org/wiki/Virtual_machine[virtual machines]. 

A https://en.wikipedia.org/wiki/Virtual_machine[virtual machine] is software that allows you to emulate an operating system within another operating system
(for example, you can create a Linux operating system within a Windows computer). Believe it or not, there are many good reasons to create virtual machines that have the same operating system as the host computer (if this seems like a foreign language, see the jargon table). 

[cols="1,3", options="header"]
.Jargon associated with virtual machines
|===
|Term
|What it means in English

|Virtual machine
|An computer that lives inside another computer, via something called *virtualisation* software. Basically you can have a computer that is, say Windows, and use virtualisation to create a Linux machine living as a program within your Windows machine. 

|host
|The host is the computer on which the virtual machine is running. 

|client
|The client is the virtual machine. It lives within the host.

|===

==== Why would I want to make a virtual machine?

There are a few reasons for making virtual machines. 

* For scientists, the main reason is that the key software you need doesn't work on your operating system, but you don't want to maintain a second computer just to run one or two particular bits of software. 
* A huge problem for buisinesses and an emerging problem for scientists is the "works on my machine" problem. Each user of various tools or software might have a different system setup so a toolchain might work on one person's computer and not on another. If you are a buisness trying to distribute sofware and you rely on a client haveing the same computer setup as you, then you are doomed. This is also extremely important for reproducibility in science: there is no use distributing code if users can't get it to work!! Virtual machines allow you to distribute tools and analyses with all the settings set up so things just work. 

==== Software for creating and manageing virtual machines

There are various ways to manage virtual machines. 

* Virtualisation software: These are programs that allow you to host a guest operating system. There are some commercial and open source alternatives. We use https://www.virtualbox.org/[VirtualBox] and the examples in this book are based on it.
** https://www.virtualbox.org/[VirtualBox] is open source and very well maintained. It just works. You should use this. 
** [VMWare] used to have a free version but they keep making it more difficult to find on their website. The authors of this book used to use it but the company that makes it decided to move to a fee-based system, so we no longer use it. 
** http://www.parallels.com/[Parallels] is very popular commercial virtualisation software. It works well and seems to be popular with people using MacOS. But why not use an equally good open source version like https://www.virtualbox.org/[VirtualBox]? 
* There is software called [Vagrant] which is complementary to virtualisation software. It automates creation of virtual machines so you can get exactly the same environment every time. It also allows you to sync files across operating systems. It is fantastic. 
* Many buisnesses use something called [Docker] but this is mainly for distributing Linux-based stuff over the cloud.  Recently a few scientists have started distributing all analysis associated with papers using a Docker image, but we'll not discuss this further. You'll only come across this is you are deep into software development. It does bear some superficial similarities to Vagrant but for our purposes Vagrant is more appropriate. 



You can run a vitrual box in two ways:
1. You can download a full operating system; when you do this you will have a Linux desktop as though you have installed a full version of Ubuntu on your computer. There are two disadvantages to this approach. First, the guest operating system will be big (a fully installed Ubuntu system takes up 5-10Gb.) Secondly, and more problematic, is that the file systems on your virtual machine and on your host computer (i.e., your normal operating system) cannot see each other and you have to do a bit of tweaking to move files across. This is annoying and inefficient. 
2. You can use something called https://www.vagrantup.com/[Vagrant] to create a server running on your machine. This server will be much smaller than the full Linux operating system, and Vagrant allows you to sync folders across the operating systems. The disadvantage is it doens't come with a nice windowing system. But for this course we will be doing most things from command line anyway: the Vagrant methods is therefore recommended.  
=== Creating a Linux environment inside any computer

For most of the topics covered in the course you can install things on any operating system. However, for some applications Linux is either the easiest option, particularly when it comes to numerical modelling. If you use university servers or supercomputers, you will need to use Linux, and cloud computing services like https://azure.microsoft.com[Azure] or https://aws.amazon.com/ec2/[Amazon Web Services] are also largely based on Linux operating systems. So for scientists it is often advantageous to be able to work in a Linux environment. Most personal or desktop computers, however, run either Windows or MacOS. This section explains how to get a Linux environment working on any computer. The way you do this is with https://en.wikipedia.org/wiki/Virtual_machine[virtual machines]. 

A https://en.wikipedia.org/wiki/Virtual_machine[virtual machine] is software that allows you to emulate an operating system within another operating system
(for example, you can create a Linux operating system within a Windows computer). Believe it or not, there are many good reasons to create virtual machines that have the same operating system as the host computer (if this seems like a foreign language, see the jargon table). 

[cols="1,3", options="header"]
.Jargon associated with virtual machines
|===
|Term
|What it means in English

|Virtual machine
|An computer that lives inside another computer, via something called *virtualisation* software. Basically you can have a computer that is, say Windows, and use virtualisation to create a Linux machine living as a program within your Windows machine. 

|host
|The host is the computer on which the virtual machine is running. 

|client
|The client is the virtual machine. It lives within the host.

|===

==== Why would I want to make a virtual machine?

There are a few reasons for making virtual machines. 

* For scientists, the main reason is that the key software you need doesn't work on your operating system, but you don't want to maintain a second computer just to run one or two particular bits of software. 
* A huge problem for businesses and an emerging problem for scientists is the "works on my machine" problem. Each user of various tools or software might have a different system setup so a toolchain might work on one person's computer and not on another. If you are a business trying to distribute software and you rely on a client having the same computer setup as you, then you are doomed. This is also extremely important for reproducibility in science: there is no use distributing code if users can't get it to work!! Virtual machines allow you to distribute tools and analyses with all the settings set up so things just work. 

==== Software for creating and managing virtual machines

There are various ways to manage virtual machines. 

* Virtualisation software: These are programs that allow you to host a guest operating system. There are some commercial and open source alternatives. We use https://www.virtualbox.org/[VirtualBox] and the examples in this book are based on it.
** https://www.virtualbox.org/[VirtualBox] is open source and very well maintained. It just works. You should use this. 
** http://www.vmware.com/[VMWare] used to have a free version but they keep making it more difficult to find on their website. The authors of this book used to use it but the company that makes it decided to move to a fee-based system, so we no longer use it. 
** http://www.parallels.com/[Parallels] is very popular commercial virtualisation software. It works well and seems to be popular with people using MacOS. But why not use an equally good open source version like https://www.virtualbox.org/[VirtualBox]? 
* There is software called https://www.vagrantup.com/[Vagrant] which is complementary to virtualisation software. It automates creation of virtual machines so you can get exactly the same environment every time. It also allows you to sync files across operating systems. It is fantastic. 
* Many businesses use something called https://www.docker.com/[Docker] but this is mainly for distributing Linux-based stuff over the cloud.  Recently a few scientists have started distributing all analysis associated with papers using a Docker image, but we'll not discuss this further. You'll only come across this is you are deep into software development. It does bear some superficial similarities to Vagrant but for our purposes Vagrant is more appropriate. 

==== Creating a full functioning Linux operating system in your computer 

You might want to create a fully functioning Linux operating system in your computer. By this I mean you will see the desktop of the Linux system when you start you virtual machine and it will have all the bells and whistles of the full operating system. 

**We do not recommend doing this!** It is overkill for our purposes, and is a waste of space on your hard disk as well as being a drain on your CPU. We include the instructions here for completeness. 

. Download and install https://www.virtualbox.org/[VirtualBox].
. Download a disk image of a Linux operating system. http://www.ubuntu.com/download/desktop[Ubuntu] is very reliable. Another option is https://www.debian.org/CD/[Debian] 
.. Most computers do not allow 64 bit guest operating systems, so choose a 32 bit version. To enable 64 bit, you need to change settings in the startup of your computer, which is a bit scary and I won't take responsibility for wrecking your computer. 
. Follow the instructions in https://www.virtualbox.org/[VirtualBox] to create a new machine using this disk image. 

There are two big disadvantages to this approach. First, the guest operating system will be big (a fully installed http://www.ubuntu.com/[Ubuntu] system takes up 5-10Gb.) Secondly, and more problematic, is that the file systems on your virtual machine and on your host computer (i.e., your normal operating system) cannot see each other and you have to do a bit of tweaking to move files across. This is annoying and inefficient. 

If you do go down this route, here are a few notes:

. Installing the operating system within the virtual machine will take ages. You might schedule this task for your lunch hour, which is what I did.
. Memory: Your virtual machine will take up some of your host machine's memory (think of that as your computer's brain). You need to balance the performace of your two machines. I try to give my virtual machine **at least** 4Gb, but if your computer has only 4Gn total this could be a problem.   
. Storage: If there is an option to sync files, make sure you select this (Vagrant does it automatically). If you don't sync files getting data from your host machine to your virtual machine and back again is time consuming and tedious. 
. When Ubuntu has installed, it will look for software updates. You should install these. This will also take ages. Maybe you have a book to read?
. You should be aware that the default keyboard layout in Ubuntu is US. Getting a different keyboard is a bit of a pain.
.. First go to system settings.
.. Then click on language support.
.. It will need to install some stuff.
.. Go to text entry.
.. In the lower left corner click on the `+` button.
.. Add your country's input source.

==== Using Vagrant to make a Linux server in your computer

https://www.vagrantup.com/[Vagrant] helps manage virtual machines. It is fantastic. It has some major advantages. 

* It uses small server-only Linux systems so is very space efficient (although even a server-only operating systems is still ~0.5Gb). 
* It syncs files between your host operating system and client operating system. You can run code in Linux and then look at the data in Windows/MacOS immediately! 
* You set up virtual machines using files called **vagrantfiles** which automate installation and setup of your Linux system. These are very small files (a few kb) but if you send them to collaborator they can have exactly the same virtual system as you with minimal effort. No more "works on my machine" problems!!

The one major disadvantage is that, because Vagrant makes a server version of Linux, it cant create windows so the only way you can interact with it is via command line. So, for example, you can't run Spyder in a vagrant virtual machine (or at least not easily). But this shouldn't be too big of a problem because you can do data analysis in your vagrant server and that files will appear in you host operating system where you can use all your graphical tools to your heart's content. 

So, Vagrant is great! You do need to do a little bit of work to get it going however. If you know what you are doing, this will take about 2 minutes not including download time (which can be long, since you need to download on the order of 1Gb of stuff). Hwever the irst time you do this you'll need to spend 15 minutes to an hour reading the instructions based on how comforatble you are with directories and the command line. 

.Getting a vagrant machine working
**************************************
. Download and install https://www.virtualbox.org/[VirtualBox]
. Download and install https://www.vagrantup.com/[Vagrant]. This might require a restart of your computer.
. If you are on windows, download http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html[putty.exe]. 
. Somewhere on your computer you should make a directory where you will put files associated with your virtual machines. I tend to put it in `pass:[C:\]VagrantBoxes` 
. Inside this directory, make two additional directories. Call one `Ubuntu32` and the other one `NMDM`. The `NMDM` is *case sensitive*, so make sure it is all capitol letters or **later steps won't work**. 
. Go to one of our raw vagrantfiles: https://raw.githubusercontent.com/simon-m-mudd/NMDM_files/master/vagrantfile_32bit[32 bit] or https://raw.githubusercontent.com/simon-m-mudd/NMDM_files/master/vagrantfile_64bit[64 bit]. For most people the 64 bit version **will not work** because you have to turn on virtualisation in your BIOS to get it to work. If you have no idea what those words mean choose the 32 bit version.
. Copy the raw file (`ctrl-A` then `ctrl-C`), paste it into a text editor (`ctrl-v`) and then save the file as `vagrantfile` (no extension!!) in the **Unbuntu32** directory you made earlier. 
. Open a powershell window and go to that directory (`cd pass:[C:\]VagrantBoxes\Ubuntu32`) and then type `vagrant up`.
. Wait for a long time as ~1 Gb of stuff downloads and a Linux operating system boots. If you get an error message about a timeout just run `vagrant halt` and `vagrant up` again. 
. Open **putty.exe** (look for it in the start menu) if you are in Windows. In other operating systems just type `vagrant ssh` and you can skip the next step. 
. Choose host name as **127.0.0.1** and port **2222**. Save as `vagrant` so you don't have to do type that stuff in every time. Click connect. Say yes to accepting the secutiry key. 
. The username is `vagrant` and the password is `vagrant`. This machine is running on your local computer not over a network so don't worry about people stealing your data. 
. You will find yourself in a Linux server!
. The directory in the server `/NMDM` is the same as `pass:[C:\]VagrantBoxes\NMDM` in your host computer! You can edit files in one opertaing system and instantly access it in the other!
. To shut the machine type `vagrant halt` in the same terminal or powershell whindow where you typed `vagrant up`. 
**************************************
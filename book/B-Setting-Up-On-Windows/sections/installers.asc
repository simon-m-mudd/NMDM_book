=== Windows installation programs

Take a deep breath. I am afraid this is going to take a while.
It can be done, but you may psychological treatment before the end.
You might consider just installing a <<Turning your windows machine into a Linux machine,Linux Virtual machine>> instead of trying to get the software installed within a Windows environment.

==== Package management

If you are a windows user, you are probably used to installing software on windows the traditional way using installation files.
The tools we are using involve many linked programs, and installing them by downloading windows installers from their respective websites can be tiresome.
An alternative is to use something called a https://en.wikipedia.org/wiki/Package_manager[machine package manager], which makes installing software a bit less of a hassle.

===== Chocolatey package manager

Here we will use a machine package manager built specifically for windows called https://chocolatey.org/[chocolatey].

To install *chocolatey*, type in the following in your **administrative** powershell:

  PS> iex ((new-object net.webclient).DownloadString('https://chocolatey.org/install.ps1'))

You then just have to sit back and wait while it installs.

NOTE: To test if chocolatey is working after the installation, type `choco -v`. If you get an error saying it is not a recognized name of a cmdlet or path, then simply close your powershell windows and open new ones.

Once you have chocolatey installed, you can get the additional packages that are required for the tools we use in this book by using the `choco` command.

==== Git

You can install git by downloading the installation package from the https://desktop.github.com/[Github desktop] website.
Alternatively, you can use chocolatey:

  PS> choco install git

You can check if it works in the command line by calling

  PS> git --version

If you install git desktop, you will get a https://git-scm.com/book/en/v2/Git-in-Other-Environments-Git-in-Powershell[git powershell] link on your desktop.
This powershell is quite useful when using git since it does things like highlights files in different colours depending on status
(e.g., if they have been modified or not or of they are being tracked).

=== Python

Python in Windows can be a little bit more difficult to manage than python in Linux.
You can get python through chocolatey, but it makes installing extra packages a bit of a pain.

Instead, you probably want to install python as part of a package that includes all the handy python libraries and associated programs.

The popular ones are:

. http://python-xy.github.io/[Python(x,y)] contains all manner of useful packages for scientists.
I have found, however, that updating this is not so straightforward;
if you have a look at the http://python-xy.github.io/downloads.html[Python(x,y) downlaods page] you will see that the updates have dependencies that dead end,
so if you are on, say, Python(x,y) 2.6.X you will need to reinstall Python(x,y) 2.7.X if you want continued updates.
Python(x,y) is also huge: it includes *many* python packages, most of which you will never use.
. http://winpython.sourceforge.net/[Winpython] is another python package that has a nice updating interface.
. https://store.continuum.io/cshop/anaconda/[Anaconda] is another scientific package that includes all sorts of smaller packages.
It seems to be able to handle updates better than Python(x,y) through its `conda` updating interface.
. http://conda.pydata.org/miniconda.html[miniconda] uses the same `conda` updating interface as `anaconda`, the difference is that with `miniconda` things arene't installed automatically,
so you will have to figure out what you want and then use `conda` to install new packages (e.g., pandas, scipy, gdal, etc.)

=== R

Luckily, R has an installation package for Windows.
You can just download it from the https://cran.r-project.org/bin/windows/base/[R website].

=== Ruby

You can check to see if Ruby is installed on your system by typing

  PS> ruby -v

and you can check the Rubygems version with

  PS> gem -v

==== Install Ruby using choco

If these are not installed, install them using <<Chocolatey package manager,chocolatey>>
(in an <<Starting a powershell session,administrator powershell>>).
While you are at it, install the RubyDev and Node.js package:

  PS> choco install ruby
  PS> choco install rubygems
  PS> choco install ruby2.devkit
  PS> choco install node.js

==== Fix rubygems on Windows

At the time of this writing, rubygems is "broken" on Windows:
if you try to install a gem file you will get an error that says you cannot make an SSL connection.
You will need to fix this problem by https://gist.github.com/luislavena/f064211759ee0f806c88[copying a trust certificate into you rubygems folder].

1. First download the file https://raw.githubusercontent.com/rubygems/rubygems/master/lib/rubygems/ssl_certs/AddTrustExternalCARoot-2048.pem[AddTrustExternalCARoot-2048.pem].

WARNING: It seems some browsers add formatting to this file when downloaded (Chrome does this, for example).
I only managed to get this fix to work after downloading the file using Internet Explorer.

[start=2]
2. Next, find the location of your gems installation:

  PS> gem which rubygems
  C:/Ruby21/lib/ruby/2.1.0/rubygems.rb

3. Go to the folder and then go into the SLL_certs subfolder.
In this case it is at: `C:/Ruby21/lib/ruby/2.1.0/rubygems/SSL_certs`.
Copy the `.pem` file into this folder. Rubygems should now work.

==== Install some gems

From here we can install some useful ruby gems.
http://asciidoctor.org/[Asciidoctor] is really great for writing documentation.
http://bundler.io/[Bundler] is useful for keeping Ruby packages up to date.

  PS> gem install asciidoctor
  PS> gem install bundler

=== C++ and Fortran

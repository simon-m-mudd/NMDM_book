== Making a simple plotting package

As you start to write simple functions in python, you might not only start to accumulate a number of tool you wish to recycle, but you might also end up with large numbers of individual files. It might make sense for you to package these files into a python package. 

Once you package your python modules you can `import` them. This takes very little effort. In this section we are going to explain how to make a very simple python package. We will use a plotting example in which you will use http://matplotlib.org/[matplotlib] to prepare figures for publication. The package will just plot x-y data but of the correct size to make a figure for an 83 mm wide column. 

Why don't we just do this in excel? First, read this: http://science.sciencemag.org/content/354/6308/142[The hard road to reproducibility, Science Magazine, 2016]. Then consider that you have made an excel plot for a paper and you get a few new data points. Do you really want to go through all the data selection, formatting, clicking, etc again? Also, once your figure is published, you might want to quickly generate it again. Doing this with code is the best way to ensure your figures are reproducible. If you keep them under version control (using, for example, *git*), it means that you can go back and see how you did every iteration of the figure. I highly recommend this approach.   

=== Easy steps to make a package

Okay, brace yourself. Are you ready? Here are the step.

. Make a directory to hold your modules (i.e., `.py` files). 
. Put your modules in that folder. These should contain functions defined using `def`.
. In that folder make a file called `__init__.py`. That is, two underscores, `init` another two underscores and then `.py`.
. In the `__init__.py` file write `from MyModule import *` for each of your modules. So if your module was called `SupaPlot.py`, your `__init__.py` file would contain the line `from SupaPLot import *`.
. You are finished! Now all you need to do in put the folder wherever you want to work and you and import it with `import MyPackageName`, where `MyPackageName` is the name of the directory.  

=== Example: figures for publications

We will go through a simple plotting package for taking x-y data and plotting it so that the figure is exactly the right size for a standard 1 column figure in a typical journal. These are almost always ~80mm wide, and and for [Copernicus] journals (the journals for the [European Geoscience Union]) they are exactly 83mm wide. You should be able to look up the size of figures in your favourite journal under the author guidelines section. 

. First, make a directory to hold your python package. I am going to call mine `FormattedFigures`. 
. Create a python file inside this directory called `CopernicusFormat.py` (you can use a text editor or Spyder to make a new file).
. You are going to need *matplotlib's* plotting functions, so import some stuff:
+
[source,python]
----
import matplotlib.pyplot as plt
from matplotlib import rcParams
----
+
. The `matplotlib.pyplot` package just contains the plotting functions and the `rcParams` allows you to change default plot settings.
+
. We will first define a simple plotting function. It takes x-y data and makes a plot that is 83mm wide:
+
[source,python]
----
# A very simple plot that makes an 83mm wide figure
def SimplePlot(x,y):
    
    FileFormat = "pdf"    
    
    # Set the label font
    label_size = 8

    # Set up fonts for plots
    rcParams['font.family'] = 'sans-serif'
    rcParams['font.sans-serif'] = ['arial']
    rcParams['font.size'] = label_size
    
    Fig1 = plt.figure(1, facecolor='white',figsize=(3.26,3.26))  
    plt.plot(x,y)
    plt.savefig("A_figure.pdf", format = FileFormat)
----
+
A few things here: we want a pdf file so we set a `FileFormat`. We set the `label_size` for the fonts. We use `rcParams` to set up some defaults. Finally we include a size of the figure. Somewhat stupidly, the default unit of measure for matplotlib is inches, so the bit that says `figsize=(3.26,3.26)` is telling matplotlib it wants a 3.26x3.26 inch figure. 3.26 inches happen to be equal to 83 mm. 
+
. Okay, we need to write a few more simple files. First, we will make an `__init__.py` file in the directory `FormattedFigures`.  This file contains, in its entirety, the following line:
+
.The __init__.py file
[source,python]
----
from CopernicusFormat import *
----
+
. Okay, now lets write a file to test this package. In one directory up from the `FormattedFigures` directory, write a python file called `test_copernicus.py`. It will import the packages `FormattedFigures`. The package has that name because that is the name of its directory. The file should look like this:
+
.The test_copernicus.py file
[source,python]
----
import FormattedFigures as FF

def test_plot():
    x = [1,2,3,4]
    y = [3,2,1,2]
    
    print x
    print y
    
    FF.SimplePlot(x,y)
    


# This bit at the bottom tells the python interpreter what to do if you run the
# script directly
if __name__ == "__main__":
    test_plot()    
----
+
. If you run this script you should get a pdf that looks like this:
+
.A very simple figure that. 
image::images/First_figure.png[A very simple figure]
+
This figure happens to be exactly 83mm wide!




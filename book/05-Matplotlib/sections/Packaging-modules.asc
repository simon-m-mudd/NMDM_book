=== Making a simple plotting package

As you start to write simple functions in python, you might not only start to accumulate a number of tool you wish to recycle, but you might also end up with large numbers of individual files. It might make sense for you to package these files into a python package. 

Once you package your python modules you can `import` them. This takes very little effort. In this section we are going to explain how to make a very simple python package. We will use a plotting example in which you will use http://matplotlib.org/[matplotlib] to prepare figures for publication. The package will just plot x-y data but of the correct size to make a figure for an 83 mm wide column. 

Why don't we just do this in excel? First, read this: http://science.sciencemag.org/content/354/6308/142[The hard road to reproducibility, Science Magazine, 2016]. Then consider that you have made an excel plot for a paper and you get a few new data points. Do you really want to go through all the data selection, formatting, clicking, etc again? Also, once your figure is published, you might want to quickly generate it again. Doing this with code is the best way to ensure your figures are reproducible. If you keep them under version control (using, for example, *git*), it means that you can go back and see how you did every iteration of the figure. I highly recommend this approach.   

==== Easy steps to make a package

Okay, brace yourself. Are you ready? Here are the step.

. Make a directory to hold your modules (i.e., `.py` files). 
. Put your modules in that folder. These should contain functions defined using `def`.
. In that folder make a file called pass:[__init__.py]. That is, two underscores, `init` another two underscores and then `.py`.
. In the pass:[__init__.py] file write `from MyModule import *` for each of your modules. So if your module was called `SupaPlot.py`, your pass:[__init__.py] file would contain the line `from SupaPLot import *`.
. You are finished! Now all you need to do in put the folder wherever you want to work and you and import it with `import MyPackageName`, where `MyPackageName` is the name of the directory.  

==== Example: figures for publications

We will go through a simple plotting package for taking x-y data and plotting it so that the figure is exactly the right size for a standard 1 column figure in a typical journal. These are almost always ~80mm wide, and for http://publications.copernicus.org/[Copernicus] journals (the journals for the http://www.egu.eu/[European Geosciences Union]) they are exactly 83mm wide. You should be able to look up the size of figures in your favourite journal under the author guidelines section. 

. First, make a directory to hold your python package. I am going to call mine `FormattedFigures`. 
. Create a python file inside this directory called `CopernicusFormat.py` (you can use a text editor or Spyder to make a new file).
. You are going to need *matplotlib's* plotting functions, so import some stuff:
+
[source,python]
----
import matplotlib.pyplot as plt
from matplotlib import rcParams
----
+
. The `matplotlib.pyplot` package just contains the plotting functions and the `rcParams` allows you to change default plot settings.
+
. We will first define a simple plotting function. It takes x-y data and makes a plot that is 83mm wide:
+
.The CopernicusFormat.py file 
[source,python]
----
import matplotlib.pyplot as plt
from matplotlib import rcParams

# A very simple plot that makes an 83mm wide figure
def SimplePlot(x,y):
    
    FileFormat = "pdf"    
    
    # Set the label font
    label_size = 8

    # Set up fonts for plots
    rcParams['font.family'] = 'sans-serif'
    rcParams['font.sans-serif'] = ['arial']
    rcParams['font.size'] = label_size
    
    Fig1 = plt.figure(1, facecolor='white',figsize=(3.26,3.26))  
    plt.plot(x,y)
    plt.savefig("A_figure.pdf", format = FileFormat)
    plt.clf()
----
+
A few things to note here: we want a pdf file so we set a `FileFormat`. We set the `label_size` for the fonts. We use `rcParams` to set up some defaults. Finally we include a size of the figure. Somewhat stupidly, the default unit of measure for matplotlib is inches, so the bit that says `figsize=(3.26,3.26)` is telling matplotlib it wants a 3.26x3.26 inch figure. 3.26 inches happen to be equal to 83 mm. 
+
. Okay, we need to write a few more simple files. First, we will make an pass:[__init__.py] file in the directory `FormattedFigures`.  This file contains, in its entirety, the following line:
+
.The pass:[__init__.py] file, in its entirety
[source,python]
----
from CopernicusFormat import *
----
+
. Okay, now lets write a file to test this package. In one directory up from the `FormattedFigures` directory, write a python file called `test_copernicus.py`. It will import the packages `FormattedFigures`. The package has that name because that is the name of its directory. The file should look like this:
+
.The test_copernicus.py file
[source,python]
----
import FormattedFigures as FF

def test_plot():
    x = [1,2,3,4]
    y = [3,2,1,2]
    
    print x
    print y
    
    FF.SimplePlot(x,y)
    


# This bit at the bottom tells the python interpreter what to do if you run the
# script directly
if __name__ == "__main__":
    test_plot()    
----
+
. If you run this script you should get a pdf that looks like this:
+
.A very simple figure. 
image::images/First_figure.png[A very simple figure]
+
This figure happens to be exactly 83mm wide!

==== More formatting 

Okay, lets add some extra formatting. 

. I am going to make a second function that includes x and y axis labels. It goes in the `CopernicusFormat.py` file. Here is the function:
+
[source,python]
----
# A very simple plot that makes an 83mm wide figure
def SimplePlot2(x,y,xlabel_text = "x", ylabel_text = "y"):
    
    # We want a pdf figure so we set the fileformat to pdf
    FileFormat = "pdf"    
    
    # Set the label font
    default_size = 8
    label_size = 11

    # Set up fonts for plots
    rcParams['font.family'] = 'sans-serif'
    rcParams['font.sans-serif'] = ['arial']
    rcParams['font.size'] = default_size
    
    plt.figure(1, facecolor='white',figsize=(3.26,3.26)) 
    plt.xlabel(xlabel_text,fontsize = label_size)
    plt.ylabel(ylabel_text,fontsize = label_size) 
    plt.plot(x,y)
    plt.savefig("Figure2.pdf", format = FileFormat) 
    plt.clf()
----
+
. This plot does a few different things: it has different sizes for the default font and for the labels. It also allows your to input axes labels as strings. When it declares on the definition line `xlabel_text = "x"` it means that the default value for `xlabel_text` is `"x"`. 
+
. You can run this if you add the line: `FF.SimplePlot2(x,y,"Toads","Popsicles")` to your `test_copernicus.py` file. The result is this:
+
.A not quite as simple figure
image::images/Figure2.png[A very simple figure]
+
. There are a few things wrong with this: The label `Popsicles` is getting cut off, and the tick marks are not the same size as the borders. Lets try to fix these things.


===== Fixing ticks and spines

This is going to seem tedious but the way to manipulate the spines and ticks is by controlling them directly, which means adding some more lines to your code. 

. Replace the middle lines of the second plotting function with:
+
[source,python]
----
    ax = plt.subplot(111)    
    ax.plot(x,y,linewidth=2) 
    plt.xlabel(xlabel_text,fontsize = label_size)
    plt.ylabel(ylabel_text,fontsize = label_size) 

    # This makes all the spines thick so you can see them         
    ax.spines['top'].set_linewidth(1.5)
    ax.spines['left'].set_linewidth(1.5)
    ax.spines['right'].set_linewidth(1.5)
    ax.spines['bottom'].set_linewidth(1.5)
        
    # This gets all the ticks, and pads them away from the axis so that the corners don't overlap
    ax.tick_params(axis='both', width=1.5, pad = 2)
    for tick in ax.xaxis.get_major_ticks():
        tick.set_pad(10)
        
    plt.savefig("Figure2.pdf", format = FileFormat)
    plt.clf()
----
+
This solves some of the problems:
+
.A not quite as simple figure, with adjusted ticks and spines
image::images/Figure2b.png[A very simple, better, figure]
+
. What is going on here? First I use `subplot` to get an axis handle so that I can control the elements of the axis. I then set the linewidth of the spines and ticks. I also set padding of the ticks to control how much space is between my ticks and my text. I also changes the linewidth of my plot so that it is a bit bigger than the ticks and the spines. 
+
. If you want longer tick marks you can change the following line:
+
[source,python]
----
    ax.tick_params(axis='both', width=1.5, pad = 2, length = 10)
----
+
This will make your plot look stupid but you can see what is happening. 
+
You can also change the ticks from pointing in to pointing out by adding this to the line:
+
[source,python]
----
    ax.tick_params(axis='both', width=1.5, pad = 2, length = 10, direction="out")
----

===== Getting things to fit

In previous lessons, we have used the `tight` control on figure formatting. However, sometimes when you mix multiple elements this doesn't work. In addition, you might want some control over placement of your figure's elements. This is where the http://matplotlib.org/users/gridspec.html[`GridSpec`] package is very useful. 

http://matplotlib.org/users/gridspec.html[`GridSpec`] allows you to make totally custom plots, and helps place different plot elements. I encourage you to read the documentation on the matplotlib website if you want to make custom grids, but here I just go over some of the basics. 

. First, add a third module to your plotting code:
+
.The GridSpec version of your figure
[source,python]
----
# A very simple plot that makes an 83mm wide figure, using GridSpec
def SimpleGridSpecPlot(x,y,xlabel_text = "x", ylabel_text = "y"):
 
    # We need to get the GridSpec package
    from matplotlib.gridspec import GridSpec
   
    # We want a pdf figure so we set the fileformat to pdf
    FileFormat = "pdf"    
    
    # Set the label font
    default_size = 8
    label_size = 11

    # Set up fonts for plots
    rcParams['font.family'] = 'sans-serif'
    rcParams['font.sans-serif'] = ['arial']
    rcParams['font.size'] = default_size
    
    Fig1 = plt.figure(1, facecolor='white',figsize=(3.26,3.26)) 
    
    # generate a 100x100 grid. The other bits of data are the padding on the edge 
    gs = GridSpec(100,100,bottom=0.13,left=0.0,right=0.95,top=1.0)     

    # Now place the plot in the grid. NOTE: the first set of numbers is the rows (vertical direction),
    # starting from the TOP
    ax = Fig1.add_subplot(gs[15:90,15:95])
      
    ax.plot(x,y,linewidth=2) 
    plt.xlabel(xlabel_text,fontsize = label_size)
    plt.ylabel(ylabel_text,fontsize = label_size) 

    # This makes all the spines thick so you can see them         
    ax.spines['top'].set_linewidth(1.5)
    ax.spines['left'].set_linewidth(1.5)
    ax.spines['right'].set_linewidth(1.5)
    ax.spines['bottom'].set_linewidth(1.5)
        
    # This gets all the ticks, and pads them away from the axis so that the corners don't overlap
    ax.tick_params(axis='both', width=1.5, pad = 2, length = 3,direction="in")
    for tick in ax.xaxis.get_major_ticks():
        tick.set_pad(10)

    plt.savefig("Figure_GridSpec.pdf", format = FileFormat)
    plt.clf() 
----
+
. Again, to run this you need to insert a line in your `test_copernicus.py` file.
+
The resulting figure looks like this:
+
.A figure positioned using GridSpec
image::images/Figure_GridSpec.png[A GridSpec figure]
+
. You can try to adjust the numbers in the following lines to see the effect:
[source,python]
----
    # generate a 100x100 grid. The other bits of data are the padding on the edge 
    gs = GridSpec(100,100,bottom=0.13,left=0.0,right=0.95,top=1.0)     

    # Now place the plot in the grid. NOTE: the first set of numbers is the rows (vertical direction),
    # starting from the TOP
    ax = Fig1.add_subplot(gs[15:90,15:95])
----


==== Where to go from here

Okay, you  might be thinking that this is quite a lot of work for just a simple figure. But you can copy and paste code: I've not written these kinds of scripts from scratch in many years: I recycle old code. In addition, this approach allows you to exactly create a figure for a paper that can be easily reproduced, a big advantage in scientific data analysis. 

We have obviously only scratched the surface of matplotlib plotting, but hopefully this has given you some ideas about where to dig deeper if you want learn about making figures using Matplotlib. 
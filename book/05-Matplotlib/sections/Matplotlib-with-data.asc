=== More on visualising data in Matplotlib

In this section we will work a bit more with python-based data visualisation. 

==== Get the data and scripts

Data files for these exercises can be copied from ~ressery/NMDM on linux.

If you have not cloned the data for this course, you can do so with 

[source,console]
----
$ git clone https://github.com/simon-m-mudd/NMDM_files.git
----

If you have already cloned this repository, you should be able to update it to the latest version by going into the repository folder on your local machine and typing:

[source,console]
----
$ git pull -u origin master
----

==== Watch the videos

There are a few videos to watch in support of this lesson:

* The introductory video: http://www.geos.ed.ac.uk/~ressery/matplotlibintro.mp4 or http://www.geos.ed.ac.uk/~ressery/matplotlibintro.mov
* Video on plotting 2D data: http://www.geos.ed.ac.uk/~ressery/matplotlibintro.mp4 or http://www.geos.ed.ac.uk/~ressery/matplotlibintro.mov

IMPORTANT: If you clone the data repository your directories holding the data files and scripts will be different than in the video. You will need to adjust your directories accordingly. 

==== Plot the data

. First, copy (or link) file Tay1993.txt and write a Python script to make a figure with a different line for the daily flow in each month of the year. It will be much neater if you use a loop to do this rather than repeating the same code 12 times; see https://docs.python.org/2/tutorial/controlflow.html if you don’t know how to do that. If you label each line using
+
[source,python]
----
plt.plot(days, flow, label=month_name)
----
+
and put
+
[source,python]
----
plt.legend()
----
+
before showing the plot, the lines will be labelled to show which is which; month_name is a string that you could put in by hand or you could get from the calendar module.
+
. Make a separate subplot of the flow for each month of the year. Note that the subplot number can be a variable, e.g.
+
[source,python]
----
plt.subplot(4,3,i)
----
with `i=1` giving the top left subplot (not `i=0` as you might expect from Python) and `i=12` the bottom right. 
You might want to make the figure bigger to fit all of these subplots in, which you can do using
+
[source,python]
----
plt.figure(figsize=(xsize, ysize))
----
+
The default size is 8 × 6 inches. If the labels are now overlapping, adding
+
[source,python]
----
plt.tight_layout()
----
before showing the plot will adjust the spacing to make room.
+
. The file `NYair.txt` contains measurements of ozone concentration, solar radiation, 
daily maximum temperature and wind speed in New York, 
with two header lines saying which column is which and which units the variables are measured in. 
Make scatter plots for every pair of variables, paying attention to the labelling of the axes and the spacing of the subplots (you will be able to write compact code for this example using loops if you read in the whole array rather than reading the columns separately). 
The command
+
[source,python]
----
print np.corrcoeff(data, rowvar=0)
----
will print a correlation matrix showing which variables are most strongly related. 
To take this further, you could fit regression lines to the scatter plots or make a multiple regression model to predict ozone pollution from meteorological variables:
+
* https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.linregress.html
* http://www.datarobot.com/blog/multiple-regression-using-statsmodels
+
. File MtStHelens.txt contains an 800×800 grid of elevations at 20 m horizontal spacing for Mount Saint Helens. Use this to make a shaded relief map and experiment with different elevation and azimuth angles for the illumination source. There is an example of how to do this at http://matplotlib.org/examples/pylab_examples/shading_example.html.
+
. The files `Psurf.txt`, `Uwind.txt` and `Vwind.txt` contain forecasts of the surface pressure (hPa) 
and westerly and southerly components of the wind (m s–1) at 10 m height over the North Atlantic on 1 September 2010. 
Plot these files individually and then combine them in a single plot with colours for wind speed, 
arrows for wind vectors and contours for pressure (the Met Office uses a 4 hPa contour interval for surface pressure charts). 
Select a nice colour map for the wind speeds from http://matplotlib.org/users/colormaps.html and add a colour bar.
You will want to add coastlines if plotting fields for larger geographic areas, which raises the problem of matching the coastlines to the projection used for your data. The matplotlib basemap toolkit can handle all of the common map projections, and several uncommon ones.
http://matplotlib.org/basemap/users/mapsetup.html

.Sea temperature
image::images/Sea_temp.png[Sea temperature]
